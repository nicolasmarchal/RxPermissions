apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions.unitTests.includeAndroidResources = true
    testOptions.unitTests.all {
        // unitTests.returnDefaultValues = true
        // Always show the result of every unit test, even if it passes.
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation rootProject.ext.rxJava
    implementation rootProject.ext.androidXFragment
    implementation rootProject.ext.androidXAnnotation
    implementation rootProject.ext.androidXAppcompat

    testImplementation 'junit:junit:4.13'
    testImplementation rootProject.ext.mockito
    testImplementation rootProject.ext.robolectric
    testImplementation rootProject.ext.khronosOpenGLApi
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications {
        release(MavenPublication) {
            from components.release

            groupId = 'com.nicolasmarchal.rxpermissions'
            artifactId = 'rxpermissions'
            version = libraryVersion

            artifact sourcesJar
            artifact javadocJar
        }
    }
}
